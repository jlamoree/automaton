<?xml version="1.0" encoding="utf-8"?>

<project default="init" name="Automaton" basedir=".">

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="build/lib/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>

	<taskdef name="jmeter" classname="org.programmerplanet.ant.taskdefs.jmeter.JMeterTask">
		<classpath>
			<pathelement location="build/lib/ant-jmeter-1.1.1.jar"/>
		</classpath>
	</taskdef>

	<!-- Node properties for multiple instances on a single server. Ex: ant -Dnode.name=node01 build -->
	<property file="./build/${node.name}.properties"/>
	<property name="node.name" value="localhost"/>

	<!-- Specify the server.name property via the Ant options. Ex: ant -Dserver.name=foo build -->
	<property file="./build/${server.name}.properties"/>

	<!-- The user.name system property is provided by the JVM, which reads the environment variable %USERNAME% or $USER -->
	<property file="./build/${user.name}.properties"/>

	<property name="project.version" value="1.0"/>
	<property name="project.build" location="./build"/>
	<property name="project.test" location="./test"/>
	<property name="project.src" location="./src"/>
	<property name="project.doc" location="./doc"/>
	<property name="project.lib" location="./lib"/>
	<property name="project.cache" location="${project.build}/cache"/>
	<property name="project.work" location="${project.build}/work"/>
	<property name="project.deps" value="https://s3.amazonaws.com/jlamoree-dev/x"/>

	<property name="tests.results" location="${project.build}/results"/>

	<import file="${project.build}/macrodefs/requirefile.xml"/>

	<!-- Tomcat -->
	<property name="tomcat.home" location="/var/lib/tomcat"/>
	<property name="tomcat.approot" location="${tomcat.home}/webapps/ROOT"/>

	<!-- NGINX -->
	<property name="nginx.host" value="automatonapp.com"/>
	<property name="nginx.port" value="80"/>
	<property name="nginx.logs" value="/var/log/nginx"/>

	<!-- Application Properties -->
	<property name="webapp.ip" value="127.0.0.1"/>
	<property name="webapp.host" value="localhost"/>
	<property name="webapp.port" value="8080"/>
	<property name="webapp.path" location="${tomcat.approot}"/>
	<property name="webapp.cdn" value="http://cdn.automatonapp.com"/>
	<property name="webapp.datasource" value="automaton"/>
	<property name="webapp.environment" value="production"/>

	<!-- ColdBox -->
	<property name="coldbox.dist" value="coldbox_standalone_3.8.1.zip"/>
	<property name="coldbox.hash" value="e6ccde8faddfdda8970cf9a23798a42d755c68e6"/>
	<property name="coldbox.path" location="${webapp.path}/coldbox"/>
	<property name="coldbox.reinit.password" value="CFML4EVER"/>

	<!-- MX Unit -->
	<property name="mxunit.jar" location="${project.build}/lib/mxunit-ant.jar"/>
	<property name="mxunit.dist" value="mxunit-framework-2.1.0.zip"/>
	<property name="mxunit.hash" value="d8448a379a1cdd920c8392f6fb433df1faf49c8e"/>
	<property name="mxunit.outputdir" location="${tests.results}/mxunit"/>
	<property name="mxunit.timeout" value="300"/>
	<property name="mxunit.runner" value="/test/resources/HttpAntRunner.cfc?requestTimeout=${mxunit.timeout}"/>

	<!-- VarScoper -->
	<property name="varscoper.dist" value="varscoper4.zip"/>
	<property name="varscoper.hash" value="8ea13f1457eea8c05532ca38c5ca40d9834f2ca8"/>
	<property name="varscoper.url" value="http://${nginx.app.server}:${nginx.app.port}/test/varscoper/varScoper.cfm"/>
	<property name="varscoper.path" value="${webapp.path}/model"/>
	<property name="varscoper.recurse" value="true"/>
	<property name="varscoper.outputfile" location="${tests.results}/varscoper/varscoper.csv"/>

	<!-- ColdDoc -->
	<property name="colddoc.dist" value="colddoc_v1.0.zip"/>
	<property name="colddoc.hash" value="445e5ca1b0795a272f76cc0cb9b1e02a64bdcb67"/>
	<property name="colddoc.output" value="${java.io.tmpdir}/colddoc.html"/>

	<!-- Deploy information -->
	<tstamp>
		<format property="deploy.release" pattern="yyyyMMddHHmmss"/>
	</tstamp>

	<!-- HTTP Headers -->
	<property name="appProxy.serverHostHeaderName" value="X-NGINX-Host"/>
	<property name="appProxy.serverAddressHeaderName" value="X-NGINX-Server-IP"/>
	<property name="appProxy.serverPortHeaderName" value="X-NGINX-Server-Port"/>
	<property name="appProxy.clientAddressHeaderName" value="X-NGINX-Client-IP"/>
	<property name="appProxy.secureEndpointHeaderName" value="X-NGINX-Secure-Endpoint"/>
	<property name="geoIp.countryHeaderName" value="X-NGINX-GeoIP-Country"/>
	<property name="geoIp.regionCodeHeaderName" value="X-NGINX-GeoIP-Region-Code"/>
	<property name="geoIp.regionNameHeaderName" value="X-NGINX-GeoIP-Region-Name"/>
	<property name="geoIp.cityHeaderName" value="X-NGINX-GeoIP-City"/>
	<property name="geoIp.coordsHeaderName" value="X-NGINX-GeoIP-Coords"/>
	<property name="geoIp.dmaCodeHeaderName" value="X-NGINX-GeoIP-DMA-Code"/>

	<!-- JMeter Config -->
	<property name="jmeter.home" location="jMeter"/>
	<property name="jmeter.threads" value="10"/>
	<property name="jmeter.loop" value="1"/>
	<property name="jmeter.results" location="${tests.results}/jmeter"/>

	<!-- JMX Config -->
	<property name="jmx.username" value="jmx"/>
	<property name="jmx.password" value="secret"/>
	<property name="jmx.manager.bean" value="Catalina:context=/,host=localhost,type=Manager"/>

	<target name="init" description="Initialize working directory and perform sanity check.">
		<echo message="Starting Ant from ${basedir} by user ${user.name}"/>

		<fail message="The application webroot (${webapp.path}) does not exist.">
			<condition>
				<not>
					<available file="${webapp.path}" type="dir"/>
				</not>
			</condition>
		</fail>
		<mkdir dir="${project.cache}"/>
		<delete dir="${project.work}"/>
		<mkdir dir="${project.work}"/>
	</target>

	<target name="deploy-app" depends="init" description="Deploy CFML application to server.">
		<echo message="Deploying the application to ${webapp.path}"/>
		
		<!-- ColdBox Configuration -->
		<copy todir="${webapp.path}/config" overwrite="true">
			<fileset dir="${project.src}/config">
				<include name="*.cfc"/>
				<include name="*.cfm"/>
			</fileset>
			<filterset>
				<filter token="VERSION" value="${project.version}"/>
				<filter token="RELEASE" value="${deploy.release}"/>
				<filter token="ENVIRONMENT" value="${webapp.environment}"/>
				<filter token="REINIT_PASSWORD" value="${coldbox.reinit.password}"/>
				<filter token="NODE_NAME" value="${node.name}"/>
				<filter token="WEBAPP_IP" value="${webapp.ip}"/>
				<filter token="WEBAPP_HOST" value="${webapp.host}"/>
				<filter token="WEBAPP_PORT" value="${webapp.port}"/>
				<filter token="WEBAPP_PATH" value="${webapp.path}"/>
				<filter token="WEBAPP_CDN" value="${webapp.cdn}"/>
				<filter token="JMX_USERNAME" value="${jmx.username}"/>
				<filter token="JMX_PASSWORD" value="${jmx.password}"/>
				<filter token="JMX_MANAGER_BEAN" value="${jmx.manager.bean}"/>
			</filterset>
		</copy>

		<!-- Application Configuration -->
		<copy todir="${webapp.path}" overwrite="true">
			<fileset dir="${project.src}">
				<include name="Application.cfc"/>
			</fileset>
			<filterset>
				<filter token="ENVIRONMENT" value="${webapp.environment}"/>
				<filter token="DATASOURCE" value="${webapp.datasource}"/>
			</filterset>
		</copy>

		<!-- Application Files -->
		<copy todir="${webapp.path}" overwrite="true">
			<fileset dir="${project.src}">
				<exclude name="config/"/>
				<exclude name="Application.cfc"/>
				<exclude name="ConnectionInspector.cfc"/>
			</fileset>
		</copy>
		<copy todir="${webapp.path}" overwrite="true">
			<fileset dir="${project.src}">
				<include name="ConnectionInspector.cfc"/>
			</fileset>
			<filterset>
				<filter token="APP_PROXY_SERVER_HOST_HEADER_NAME" value="${appProxy.serverHostHeaderName}"/>
				<filter token="APP_PROXY_SERVER_ADDRESS_HEADER_NAME" value="${appProxy.serverAddressHeaderName}"/>
				<filter token="APP_PROXY_SERVER_PORT_HEADER_NAME" value="${appProxy.serverPortHeaderName}"/>
				<filter token="APP_PROXY_CLIENT_ADDRESS_HEADER_NAME" value="${appProxy.clientAddressHeaderName}"/>
				<filter token="APP_PROXY_SCHEME_HEADER_NAME" value="${appProxy.schemeHeaderName}"/>
				<filter token="GEOIP_COUNTRY_HEADER_NAME" value="${geoIp.countryHeaderName}"/>
				<filter token="GEOIP_REGION_CODE_HEADER_NAME" value="${geoIp.regionCodeHeaderName}"/>
				<filter token="GEOIP_REGION_NAME_HEADER_NAME" value="${geoIp.regionNameHeaderName}"/>
				<filter token="GEOIP_CITY_HEADER_NAME" value="${geoIp.cityHeaderName}"/>
				<filter token="GEOIP_COORDS_HEADER_NAME" value="${geoIp.coordsHeaderName}"/>
				<filter token="GEOIP_DMA_CODE_HEADER_NAME" value="${geoIp.dmaCodeHeaderName}"/>
			</filterset>
		</copy>
	</target>

	<target name="deploy-libs" depends="init" description="Deploy all the libraries needed by the CFML application.">
		<requirefile file="${project.cache}/${coldbox.dist}" url="${project.deps}/${coldbox.dist}"/>
		<verifyfile file="${project.cache}/${coldbox.dist}" hash="${coldbox.hash}"/>

		<delete dir="${coldbox.path}"/>
		<mkdir dir="${coldbox.path}"/>
		<unzip src="${project.cache}/${coldbox.dist}" dest="${coldbox.path}">
			<patternset>
				<include name="coldbox/**"/>
			</patternset>
			<regexpmapper from="^coldbox/(.+)$$" to="\1"/>
		</unzip>
		<delete dir="${coldbox.path}/coldbox"/>
		<unzip src="${project.cache}/${coldbox.dist}" dest="${coldbox.path}">
			<patternset>
				<include name="license.txt"/>
				<include name="coldbox-*"/>
			</patternset>
		</unzip>
	</target>

	<target name="deploy-unittests" depends="init" description="Deploy the MX Unit framework and all of the test cases.">
		<requirefile file="${project.cache}/${mxunit.dist}" url="${project.deps}/${mxunit.dist}"/>
		<verifyfile file="${project.cache}/${mxunit.dist}" hash="${mxunit.hash}"/>

		<delete dir="${webapp.path}/mxunit"/>
		<unzip src="${project.cache}/${mxunit.dist}" dest="${webapp.path}/mxunit"/>
		
		<copy todir="${webapp.path}/test" overwrite="true">
			<fileset dir="${project.test}">
				<include name="Application.cfc"/>
			</fileset>
			<filterset>
				<filter token="DATASOURCE" value="${webapp.datasource}"/>
			</filterset>
		</copy>
		<copy todir="${webapp.path}/test" overwrite="true">
			<fileset dir="${project.test}">
				<exclude name="Application.cfc"/>
			</fileset>
		</copy>
	</target>

	<target name="deploy-varscoper" depends="init" description="Deploy the files needed to run a varscoper test.">
		<requirefile file="${project.cache}/${varscoper.dist}" url="${project.deps}/${varscoper.dist}"/>
		<verifyfile file="${project.cache}/${varscoper.dist}" hash="${varscoper.hash}"/>

		<delete dir="${webapp.path}/test/varscoper"/>
		<mkdir dir="${webapp.path}/test/varscoper"/>
		<touch file="${webapp.path}/test/varscoper/Application.cfc"/>
		<unzip src="${project.cache}/${varscoper.dist}" dest="${webapp.path}/test/varscoper">
			<patternset>
				<include name="display*.cfm"/>
				<include name="fileDisplay.cfm"/>
				<include name="index.cfm"/>
				<include name="license.txt"/>
				<include name="varScoper*.cf?"/>
			</patternset>
		</unzip>
	</target>

	<target name="deploy-colddoc" depends="init" description="Deploy the ColdDoc tool.">
		<requirefile file="${project.cache}/${colddoc.dist}" url="${project.deps}/${colddoc.dist}"/>
		<verifyfile file="${project.cache}/${colddoc.dist}" hash="${colddoc.hash}"/>
		
		<delete dir="${webapp.path}/colddoc"/>
		<unzip src="${project.cache}/${colddoc.dist}" dest="${webapp.path}/colddoc">
			<patternset>
				<include name="colddoc/license.txt"/>
				<include name="colddoc/ColdDoc.cfc"/>
				<include name="colddoc/strategy/**"/>
			</patternset>
			<regexpmapper from="^colddoc/(.+)$$" to="\1"/>
		</unzip>
	</target>

	<target name="undeploy" depends="init" description="Remove a deployed copy of the application and libraries.">
		<echo message="Undeploying from ${webapp.path}"/>
		<delete includeemptydirs="true">
			<fileset dir="${webapp.path}">
				<include name="**/*"/>
				<exclude name="WEB-INF/"/>
				<exclude name="META-INF/"/>
				<exclude name="CFIDE/"/>
			</fileset>
		</delete>
	</target>
	
	<target name="test-unittests" depends="init" description="Run all of the MX Unit test files.">
		<taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}"/>

		<delete dir="${mxunit.outputdir}"/>
		<mkdir dir="${mxunit.outputdir}"/>
		<mxunittask server="${cfml.engine.hostname}" port="${cfml.engine.port}" outputdir="${mxunit.outputdir}" defaultrunner="${mxunit.runner}">
			<directory path="${webapp.path}/test/unit" recurse="true" componentPath="test.unit"/>
		</mxunittask>
	</target>

	<target name="test-varscoper" depends="init" description="Run a varscoper test.">
		<get src="${varscoper.url}?displayformat=csv&amp;filePath=${varscoper.path}&amp;recursiveDirectory=${varscoper.recurse}" dest="${varscoper.outputfile}" verbose="false"/>

		<loadfile srcfile="${varscoper.outputfile}" property="varscoper.csv">
			<filterchain>
				<headfilter skip="1"/>
				<trim/>
			</filterchain>
		</loadfile>

		<fail message="CFML var scope violation is found.">
			<condition>
				<isset property="varscoper.csv"/>
			</condition>
		</fail>
	</target>

	<target name="build-colddoc-html" depends="init" description="Deploy the mini-app and run it to generate HTML documentation in Javadoc style.">
		<mkdir dir="${webapp.path}/doc"/>
		<copy todir="${webapp.path}/doc" overwrite="true">
			<fileset dir="${project.doc}">
				<include name="**"/>
			</fileset>
		</copy>
		
		<get src="http://${cfml.engine.hostname}:${cfml.engine.port}/doc/generate.cfm" dest="${colddoc.output}" verbose="false"/>
	</target>

	<target name="build-nginx-config" depends="init" description="Build NGINX configuration based on environment properties.">
		<echo message="Creating NGINX configuration using the ${nginx.template} template file."/>
		<copy todir="${project.work}" overwrite="true">
			<fileset dir="${project.build}/templates/nginx">
				<include name="${nginx.template}"/>
			</fileset>
			<filterset>
				<filter token="NGINX_PORT" value="${nginx.port}"/>
				<filter token="NGINX_HOST" value="${nginx.host}"/>
				<filter token="NGINX_LOGS" value="${nginx.logs}"/>
				<filter token="WEBAPP_IP" value="${webapp.ip}"/>
				<filter token="WEBAPP_HOST" value="${webapp.host}"/>
				<filter token="WEBAPP_PORT" value="${webapp.port}"/>
				<filter token="WEBAPP_PATH" value="${webapp.path}"/>
				<filter token="APP_PROXY_SERVER_HOST_HEADER_NAME" value="${appProxy.serverHostHeaderName}"/>
				<filter token="APP_PROXY_SERVER_ADDRESS_HEADER_NAME" value="${appProxy.serverAddressHeaderName}"/>
				<filter token="APP_PROXY_SERVER_PORT_HEADER_NAME" value="${appProxy.serverPortHeaderName}"/>
				<filter token="APP_PROXY_CLIENT_ADDRESS_HEADER_NAME" value="${appProxy.clientAddressHeaderName}"/>
				<filter token="APP_PROXY_SECURE_ENDPOINT_HEADER_NAME" value="${appProxy.secureEndpointHeaderName}"/>
			</filterset>
		</copy>
		<move file="${project.work}/${nginx.template}" tofile="${project.work}/automaton.conf"/>
		<echo message="NGINX configuration file created as ${project.work}/automaton.conf"/>
	</target>

	<target name="test-jmeter" description="Run jMeter load tests">
		<jmeter jmeterhome="${jmeter.home}" testplan="${project.test}/jmeter/user-login.jmx" resultlog="${jmeter.results}/user-login.jtl">
			<property name="request.threads" value="${jmeter.threads}"/>
			<property name="request.loop" value="${jmeter.loop}"/>
		</jmeter>
	</target>
</project>
